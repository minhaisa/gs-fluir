version: '3.8'

services:
  backend-php:
    build:
      context: ./backendPhp
      dockerfile: ./docker/php/Dockerfile
    container_name: backend-php
    volumes:
      - ./backendPhp:/var/www
    depends_on:
      - db
      - kafka
    networks:
      - app-network

  backend-python-compaing:
    build: ./backendPythonCompaing
    container_name: backend-python-compaing
    expose:
      - "8001"
    depends_on:
      - mongo
    networks:
      - app-network

  backend-python-upload:
    build: ./backendPythonUpload
    container_name: backend-python-upload
    expose:
      - "8002"
    depends_on:
      - mongo
    networks:
      - app-network

  fluir:
    build: ./FrontNext 
    container_name: fluir
    expose:
      - "3000"
    env_file:
      - ./FrontNext/.env
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: fluir
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo-db
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: fluir
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-php
      - backend-python-compaing
      - backend-python-upload
      - fluir
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    networks:
      - app-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    networks:
      - app-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    networks:
      - app-network
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092

volumes:
  db-data:
  mongo-data:

networks:
  app-network:
    name: app-network
    driver: bridge
